rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // High level rules
    function userIsOwner(owner) {
      // Ensure the User ID matches the Auth UID
      return owner == request.auth.uid;
    }

    function fingerprintIsValid(fingerprint) {
      // Make sure the ID is a 16 character hex string
      return fingerprint.matches("^[0-9a-f]{16}$");
    }

    function pubkeyIsSpki(pubkey) {
      // TODO: Implement. For now, just check that it's not null
      return pubkey != null;
    }

    // User data rules
    match /users/{userID} {
      // Ensure that the user document is allowed
      function userIsValid() {
        return userIsOwner(userID) &&
        // Make sure the fingerprint is valid
        fingerprintIsValid(request.resource.data["pubkey_fingerprint"])
      }
      
      allow read: if userIsOwner(userID);
      allow write: if userIsValid();
    }

    // Bucket rules
    // TODO: regex inputs to buckets
    match /buckets/{bucketId} {
      // Any autenticated can create a bucket
      allow create: if request.auth != null;
      // But only the owner can read, update, and delete it
      allow read, write, update, delete: if request.auth != null && request.auth.uid == resource.data.owner;
    }

    // PubKey rules
    match /pubkeys/{pubkey_fingerprint}  {
      function pubkeyIsValid() {
        // Make sure the ID is a 16 character hex string
        // TODO: Verify length?
        return fingerprintIsValid(pubkey_fingerprint) &&
        pubkeyIsSpki(request.resource.data["spki"]) &&
        userIsOwner(request.resource.data["owner"]);
      }

      allow read: if true;
      allow write, create, delete: if pubkeyIsValid();
    }
  }
}